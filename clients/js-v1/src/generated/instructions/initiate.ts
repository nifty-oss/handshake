/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findHandshakePda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitiateInstructionAccounts = {
  /** The program derived address of the handshake account (seeds: ['handshake', asset]) */
  handshake?: PublicKey | Pda;
  /** Asset account */
  asset: PublicKey | Pda;
  /** The current authority of the asset */
  authority?: Signer;
  /** The address to transfer the authority to */
  target: PublicKey | Pda;
  /** The account paying for the storage fees */
  payer?: PublicKey | Pda;
  /** The system program */
  systemProgram?: PublicKey | Pda;
  /** The nifty asset program */
  niftyAssetProgram?: PublicKey | Pda;
};

// Data.
export type InitiateInstructionData = { discriminator: number };

export type InitiateInstructionDataArgs = {};

export function getInitiateInstructionDataSerializer(): Serializer<
  InitiateInstructionDataArgs,
  InitiateInstructionData
> {
  return mapSerializer<
    InitiateInstructionDataArgs,
    any,
    InitiateInstructionData
  >(
    struct<InitiateInstructionData>([['discriminator', u8()]], {
      description: 'InitiateInstructionData',
    }),
    (value) => ({ ...value, discriminator: 2 })
  ) as Serializer<InitiateInstructionDataArgs, InitiateInstructionData>;
}

// Instruction.
export function initiate(
  context: Pick<Context, 'eddsa' | 'identity' | 'programs'>,
  input: InitiateInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'handshake',
    'HndshkSZWu1f4qdwyACwsP8YoBxvCzb7NNVB1Aj3w656'
  );

  // Accounts.
  const resolvedAccounts = {
    handshake: {
      index: 0,
      isWritable: true as boolean,
      value: input.handshake ?? null,
    },
    asset: {
      index: 1,
      isWritable: true as boolean,
      value: input.asset ?? null,
    },
    authority: {
      index: 2,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
    target: {
      index: 3,
      isWritable: false as boolean,
      value: input.target ?? null,
    },
    payer: {
      index: 4,
      isWritable: false as boolean,
      value: input.payer ?? null,
    },
    systemProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    niftyAssetProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.niftyAssetProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.handshake.value) {
    resolvedAccounts.handshake.value = findHandshakePda(context, {
      asset: expectPublicKey(resolvedAccounts.asset.value),
    });
  }
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.systemProgram.value) {
    if (resolvedAccounts.payer.value) {
      resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
        'systemProgram',
        '11111111111111111111111111111111'
      );
      resolvedAccounts.systemProgram.isWritable = false;
    }
  }
  if (!resolvedAccounts.niftyAssetProgram.value) {
    resolvedAccounts.niftyAssetProgram.value = context.programs.getPublicKey(
      'niftyAsset',
      'AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73'
    );
    resolvedAccounts.niftyAssetProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitiateInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
