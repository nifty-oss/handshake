/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  Discriminator,
  DiscriminatorArgs,
  getDiscriminatorSerializer,
} from '../types';

export type Handshake = Account<HandshakeAccountData>;

export type HandshakeAccountData = {
  discriminator: Discriminator;
  bump: number;
  asset: PublicKey;
  source: PublicKey;
  target: PublicKey;
  recipient: PublicKey;
};

export type HandshakeAccountDataArgs = {
  discriminator: DiscriminatorArgs;
  bump: number;
  asset: PublicKey;
  source: PublicKey;
  target: PublicKey;
  recipient: PublicKey;
};

export function getHandshakeAccountDataSerializer(): Serializer<
  HandshakeAccountDataArgs,
  HandshakeAccountData
> {
  return struct<HandshakeAccountData>(
    [
      ['discriminator', getDiscriminatorSerializer()],
      ['bump', u8()],
      ['asset', publicKeySerializer()],
      ['source', publicKeySerializer()],
      ['target', publicKeySerializer()],
      ['recipient', publicKeySerializer()],
    ],
    { description: 'HandshakeAccountData' }
  ) as Serializer<HandshakeAccountDataArgs, HandshakeAccountData>;
}

export function deserializeHandshake(rawAccount: RpcAccount): Handshake {
  return deserializeAccount(rawAccount, getHandshakeAccountDataSerializer());
}

export async function fetchHandshake(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Handshake> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Handshake');
  return deserializeHandshake(maybeAccount);
}

export async function safeFetchHandshake(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Handshake | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeHandshake(maybeAccount) : null;
}

export async function fetchAllHandshake(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Handshake[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Handshake');
    return deserializeHandshake(maybeAccount);
  });
}

export async function safeFetchAllHandshake(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Handshake[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeHandshake(maybeAccount as RpcAccount));
}

export function getHandshakeGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'handshake',
    'HndshkSZWu1f4qdwyACwsP8YoBxvCzb7NNVB1Aj3w656'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: DiscriminatorArgs;
      bump: number;
      asset: PublicKey;
      source: PublicKey;
      target: PublicKey;
      recipient: PublicKey;
    }>({
      discriminator: [0, getDiscriminatorSerializer()],
      bump: [1, u8()],
      asset: [2, publicKeySerializer()],
      source: [34, publicKeySerializer()],
      target: [66, publicKeySerializer()],
      recipient: [98, publicKeySerializer()],
    })
    .deserializeUsing<Handshake>((account) => deserializeHandshake(account));
}

export function getHandshakeSize(): number {
  return 130;
}

export function findHandshakePda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The asset account */
    asset: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'handshake',
    'HndshkSZWu1f4qdwyACwsP8YoBxvCzb7NNVB1Aj3w656'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('handshake'),
    publicKeySerializer().serialize(seeds.asset),
  ]);
}

export async function fetchHandshakeFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findHandshakePda>[1],
  options?: RpcGetAccountOptions
): Promise<Handshake> {
  return fetchHandshake(context, findHandshakePda(context, seeds), options);
}

export async function safeFetchHandshakeFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findHandshakePda>[1],
  options?: RpcGetAccountOptions
): Promise<Handshake | null> {
  return safeFetchHandshake(context, findHandshakePda(context, seeds), options);
}
