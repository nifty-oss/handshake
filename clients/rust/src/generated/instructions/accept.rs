//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct Accept {
    /// Handshake account
    pub handshake: solana_program::pubkey::Pubkey,
    /// Asset account
    pub asset: solana_program::pubkey::Pubkey,
    /// The address to transfer the authority to (target)
    pub authority: solana_program::pubkey::Pubkey,
    /// The account to receive the funds of storage fees
    pub recipient: solana_program::pubkey::Pubkey,
    /// The nifty asset program
    pub nifty_asset_program: solana_program::pubkey::Pubkey,
}

impl Accept {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.handshake,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.asset, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.recipient,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.nifty_asset_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = AcceptInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::HANDSHAKE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct AcceptInstructionData {
    discriminator: u8,
}

impl AcceptInstructionData {
    fn new() -> Self {
        Self { discriminator: 0 }
    }
}

/// Instruction builder for `Accept`.
///
/// ### Accounts:
///
///   0. `[writable]` handshake
///   1. `[writable]` asset
///   2. `[signer]` authority
///   3. `[writable]` recipient
///   4. `[optional]` nifty_asset_program (default to `AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73`)
#[derive(Default)]
pub struct AcceptBuilder {
    handshake: Option<solana_program::pubkey::Pubkey>,
    asset: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    recipient: Option<solana_program::pubkey::Pubkey>,
    nifty_asset_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AcceptBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Handshake account
    #[inline(always)]
    pub fn handshake(&mut self, handshake: solana_program::pubkey::Pubkey) -> &mut Self {
        self.handshake = Some(handshake);
        self
    }
    /// Asset account
    #[inline(always)]
    pub fn asset(&mut self, asset: solana_program::pubkey::Pubkey) -> &mut Self {
        self.asset = Some(asset);
        self
    }
    /// The address to transfer the authority to (target)
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// The account to receive the funds of storage fees
    #[inline(always)]
    pub fn recipient(&mut self, recipient: solana_program::pubkey::Pubkey) -> &mut Self {
        self.recipient = Some(recipient);
        self
    }
    /// `[optional account, default to 'AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73']`
    /// The nifty asset program
    #[inline(always)]
    pub fn nifty_asset_program(
        &mut self,
        nifty_asset_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.nifty_asset_program = Some(nifty_asset_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Accept {
            handshake: self.handshake.expect("handshake is not set"),
            asset: self.asset.expect("asset is not set"),
            authority: self.authority.expect("authority is not set"),
            recipient: self.recipient.expect("recipient is not set"),
            nifty_asset_program: self.nifty_asset_program.unwrap_or(solana_program::pubkey!(
                "AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `accept` CPI accounts.
pub struct AcceptCpiAccounts<'a, 'b> {
    /// Handshake account
    pub handshake: &'b solana_program::account_info::AccountInfo<'a>,
    /// Asset account
    pub asset: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address to transfer the authority to (target)
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account to receive the funds of storage fees
    pub recipient: &'b solana_program::account_info::AccountInfo<'a>,
    /// The nifty asset program
    pub nifty_asset_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `accept` CPI instruction.
pub struct AcceptCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Handshake account
    pub handshake: &'b solana_program::account_info::AccountInfo<'a>,
    /// Asset account
    pub asset: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address to transfer the authority to (target)
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account to receive the funds of storage fees
    pub recipient: &'b solana_program::account_info::AccountInfo<'a>,
    /// The nifty asset program
    pub nifty_asset_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> AcceptCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AcceptCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            handshake: accounts.handshake,
            asset: accounts.asset,
            authority: accounts.authority,
            recipient: accounts.recipient,
            nifty_asset_program: accounts.nifty_asset_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.handshake.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.asset.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.recipient.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.nifty_asset_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = AcceptInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::HANDSHAKE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.handshake.clone());
        account_infos.push(self.asset.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.recipient.clone());
        account_infos.push(self.nifty_asset_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Accept` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` handshake
///   1. `[writable]` asset
///   2. `[signer]` authority
///   3. `[writable]` recipient
///   4. `[]` nifty_asset_program
pub struct AcceptCpiBuilder<'a, 'b> {
    instruction: Box<AcceptCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AcceptCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AcceptCpiBuilderInstruction {
            __program: program,
            handshake: None,
            asset: None,
            authority: None,
            recipient: None,
            nifty_asset_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Handshake account
    #[inline(always)]
    pub fn handshake(
        &mut self,
        handshake: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.handshake = Some(handshake);
        self
    }
    /// Asset account
    #[inline(always)]
    pub fn asset(&mut self, asset: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asset = Some(asset);
        self
    }
    /// The address to transfer the authority to (target)
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// The account to receive the funds of storage fees
    #[inline(always)]
    pub fn recipient(
        &mut self,
        recipient: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient = Some(recipient);
        self
    }
    /// The nifty asset program
    #[inline(always)]
    pub fn nifty_asset_program(
        &mut self,
        nifty_asset_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.nifty_asset_program = Some(nifty_asset_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = AcceptCpi {
            __program: self.instruction.__program,

            handshake: self.instruction.handshake.expect("handshake is not set"),

            asset: self.instruction.asset.expect("asset is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            recipient: self.instruction.recipient.expect("recipient is not set"),

            nifty_asset_program: self
                .instruction
                .nifty_asset_program
                .expect("nifty_asset_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct AcceptCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    handshake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    recipient: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    nifty_asset_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
