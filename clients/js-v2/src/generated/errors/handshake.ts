/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

export const enum HandshakeProgramErrorCode {
  /** InvalidAccountLength: Invalid account length */
  INVALID_ACCOUNT_LENGTH = 0x0, // 0
  /** AlreadyInitialized: Asset already initialized */
  ALREADY_INITIALIZED = 0x1, // 1
  /** PubkeyMismatch: Pubkey mismatch */
  PUBKEY_MISMATCH = 0x2, // 2
}

export class HandshakeProgramError extends Error {
  override readonly name = 'HandshakeProgramError';

  readonly code: HandshakeProgramErrorCode;

  readonly cause: Error | undefined;

  constructor(
    code: HandshakeProgramErrorCode,
    name: string,
    message: string,
    cause?: Error
  ) {
    super(`${name} (${code}): ${message}`);
    this.code = code;
    this.cause = cause;
  }
}

let handshakeProgramErrorCodeMap:
  | Record<HandshakeProgramErrorCode, [string, string]>
  | undefined;
if (__DEV__) {
  handshakeProgramErrorCodeMap = {
    [HandshakeProgramErrorCode.INVALID_ACCOUNT_LENGTH]: [
      'InvalidAccountLength',
      `Invalid account length`,
    ],
    [HandshakeProgramErrorCode.ALREADY_INITIALIZED]: [
      'AlreadyInitialized',
      `Asset already initialized`,
    ],
    [HandshakeProgramErrorCode.PUBKEY_MISMATCH]: [
      'PubkeyMismatch',
      `Pubkey mismatch`,
    ],
  };
}

export function getHandshakeProgramErrorFromCode(
  code: HandshakeProgramErrorCode,
  cause?: Error
): HandshakeProgramError {
  if (__DEV__) {
    return new HandshakeProgramError(
      code,
      ...(
        handshakeProgramErrorCodeMap as Record<
          HandshakeProgramErrorCode,
          [string, string]
        >
      )[code],
      cause
    );
  }

  return new HandshakeProgramError(
    code,
    'Unknown',
    'Error message not available in production bundles. Compile with __DEV__ set to true to see more information.',
    cause
  );
}
