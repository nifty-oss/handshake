/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs';
import { HandshakeSeeds, findHandshakePda } from '../pdas';
import {
  Discriminator,
  DiscriminatorArgs,
  getDiscriminatorDecoder,
  getDiscriminatorEncoder,
} from '../types';

export type Handshake<TAddress extends string = string> = Account<
  HandshakeAccountData,
  TAddress
>;

export type MaybeHandshake<TAddress extends string = string> = MaybeAccount<
  HandshakeAccountData,
  TAddress
>;

export type HandshakeAccountData = {
  discriminator: Discriminator;
  bump: number;
  asset: Address;
  source: Address;
  target: Address;
  recipient: Address;
};

export type HandshakeAccountDataArgs = {
  discriminator: DiscriminatorArgs;
  bump: number;
  asset: Address;
  source: Address;
  target: Address;
  recipient: Address;
};

export function getHandshakeAccountDataEncoder(): Encoder<HandshakeAccountDataArgs> {
  return getStructEncoder([
    ['discriminator', getDiscriminatorEncoder()],
    ['bump', getU8Encoder()],
    ['asset', getAddressEncoder()],
    ['source', getAddressEncoder()],
    ['target', getAddressEncoder()],
    ['recipient', getAddressEncoder()],
  ]);
}

export function getHandshakeAccountDataDecoder(): Decoder<HandshakeAccountData> {
  return getStructDecoder([
    ['discriminator', getDiscriminatorDecoder()],
    ['bump', getU8Decoder()],
    ['asset', getAddressDecoder()],
    ['source', getAddressDecoder()],
    ['target', getAddressDecoder()],
    ['recipient', getAddressDecoder()],
  ]);
}

export function getHandshakeAccountDataCodec(): Codec<
  HandshakeAccountDataArgs,
  HandshakeAccountData
> {
  return combineCodec(
    getHandshakeAccountDataEncoder(),
    getHandshakeAccountDataDecoder()
  );
}

export function decodeHandshake<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Handshake<TAddress>;
export function decodeHandshake<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeHandshake<TAddress>;
export function decodeHandshake<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Handshake<TAddress> | MaybeHandshake<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getHandshakeAccountDataDecoder()
  );
}

export async function fetchHandshake<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Handshake<TAddress>> {
  const maybeAccount = await fetchMaybeHandshake(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeHandshake<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeHandshake<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeHandshake(maybeAccount);
}

export async function fetchAllHandshake(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Handshake[]> {
  const maybeAccounts = await fetchAllMaybeHandshake(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeHandshake(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeHandshake[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeHandshake(maybeAccount));
}

export function getHandshakeSize(): number {
  return 130;
}

export async function fetchHandshakeFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: HandshakeSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Handshake> {
  const maybeAccount = await fetchMaybeHandshakeFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeHandshakeFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: HandshakeSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeHandshake> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findHandshakePda(seeds, { programAddress });
  return await fetchMaybeHandshake(rpc, address, fetchConfig);
}
